

1a) log2n = 1, 000, 000 => n = 21,000,000

1b) √n = 1, 000, 000 => n = 1,000,000,000,000
1c) n = 1,000,000
1d) n2 = 1,000,000 => n = 1,000
1e) (log2n )^( log2n ) = 1,000,000
Because 7^7 < 1,000,000 < (7.1)^(7.1)
Then: 7 < log2n < 7.1 => 128 < n < 137.18
Try all values from 129 to 137, we found that n = 133 is the largest
value satisfying the above condition.
Therefore: n = 133
2a) ***Prove that (n + 25)2 is O( n2 )
We have: (n + 25)2 = n2 + 50n + 252
Choose c = 3, n0 = 50 , we have: c n2 = 3 n2
We consider if the following is correct:
n2 + 50n + 252 ≤ 3 n2
<=> 50n + 252 ≤ 2 n2
We can see that for every n ≥ n0 , the above inequation satisfies.
So, with c = 3, n0 = 50 , (n + 25)2 ≤ c n2 for every n ≥ n0
We conclude that (n + 25)2 is O( n2 )
*** Prove that n2 is O( (n + 25)2 )
We can see that with c = 1, n0 = 0, for every n ≥ n0 , the following
inequation satisfies: n2 ≤ c ( (n + 25)2 )
We conclude that n2 is O( (n + 25)2 )
2b) Prove that n3 is not O( n2 )
Assuming that n3 is O( n2 ), so there exists c ≥ 0, and n0 such that
n3 ≤ c n2 for every n ≥ n0
Take n1 such that n1 > c and n1 > n0
With n = n1 , n3 ≥ c n2 (because n1 > c)
This contradicts to the assumption that n3 ≤ c n2 for every
n ≥ n0 .
Therefore, n3 is not O( n2 )
2c) We have: f1 (n) x f2 (n) = (n + 25)2 ( n3 )
We choose c = 4, n0 = 25, consider the following inequation for every
n ≥ n0 :
(n + 25)2 ( n3 ) ≤ c n5
<=> (n + 25)2 ( n3 ) ≤ 4 n5
<=> (n + 25)2 ≤ 4 n2
<=> (n + 25)2 ≤ (2n)2
It’s straight-forward that for every n ≥ n0 , the above inequation
satisfies.
So, f1 (n) x f2 (n) is O( n5 )
3) We add line numbers to the code for easier code analysis:
x = 0; (1)
for (i=0; i<=n-1; i++) { (2)
for (j=i; j<=n-1; j++) { (3)
x = x + A[j]; (4)
} (5)
for (k=0; k<= n-1; k++) { (6)
for (j=0; j< =n-1; j++) { (7)
x = x + A[j]*A[k]; (8)
} (9)
} (10)
} (11)
● The initialization of “x = 0” executes in O(1) time
● The “for” loop at line (2) controlled by the counter “i”, it takes O(n)
executing time to initialize the value of “i”, then divided to 2 branches:
** The first branch is the “for” loop at line (3), controlled by the
counter j, this inner loop executes in O(n) time, combining with the
outer loop we have executing time of O( n2 )
** The second branch is the “for” loop at line (6), controlled by the
counter “k”, followed by the “for” loop at line (7), controlled by the
counter j, these two inner loops executes in O( n2 ) time, combining
with the outer loop at line (2) we have the executing time of O( n3)
In summary, the total execution time is O(1) + O( n2 ) + O( n3) , take the
dominant one, the complexity of the algorithm is O( n3)
4) Programming question: in a separate folder, with source codes, input
files, answer file: explanation and results produced by the source codes
